package com.zy.ppmusic.data.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zy.ppmusic.entity.MusicDbEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUSIC_DB_ENTITY".
*/
public class MusicDbEntityDao extends AbstractDao<MusicDbEntity, String> {

    public static final String TABLENAME = "MUSIC_DB_ENTITY";

    /**
     * Properties of entity MusicDbEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LastMediaId = new Property(0, String.class, "lastMediaId", true, "LAST_MEDIA_ID");
        public final static Property LastPlayName = new Property(1, String.class, "lastPlayName", false, "LAST_PLAY_NAME");
        public final static Property LastPlayIndex = new Property(2, int.class, "lastPlayIndex", false, "LAST_PLAY_INDEX");
        public final static Property LastPlayedPosition = new Property(3, long.class, "lastPlayedPosition", false, "LAST_PLAYED_POSITION");
        public final static Property LastPlayAuthor = new Property(4, String.class, "lastPlayAuthor", false, "LAST_PLAY_AUTHOR");
        public final static Property LastMediaPath = new Property(5, String.class, "lastMediaPath", false, "LAST_MEDIA_PATH");
    }


    public MusicDbEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MusicDbEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUSIC_DB_ENTITY\" (" + //
                "\"LAST_MEDIA_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: lastMediaId
                "\"LAST_PLAY_NAME\" TEXT," + // 1: lastPlayName
                "\"LAST_PLAY_INDEX\" INTEGER NOT NULL ," + // 2: lastPlayIndex
                "\"LAST_PLAYED_POSITION\" INTEGER NOT NULL ," + // 3: lastPlayedPosition
                "\"LAST_PLAY_AUTHOR\" TEXT," + // 4: lastPlayAuthor
                "\"LAST_MEDIA_PATH\" TEXT);"); // 5: lastMediaPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUSIC_DB_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MusicDbEntity entity) {
        stmt.clearBindings();
 
        String lastMediaId = entity.getLastMediaId();
        if (lastMediaId != null) {
            stmt.bindString(1, lastMediaId);
        }
 
        String lastPlayName = entity.getLastPlayName();
        if (lastPlayName != null) {
            stmt.bindString(2, lastPlayName);
        }
        stmt.bindLong(3, entity.getLastPlayIndex());
        stmt.bindLong(4, entity.getLastPlayedPosition());
 
        String lastPlayAuthor = entity.getLastPlayAuthor();
        if (lastPlayAuthor != null) {
            stmt.bindString(5, lastPlayAuthor);
        }
 
        String lastMediaPath = entity.getLastMediaPath();
        if (lastMediaPath != null) {
            stmt.bindString(6, lastMediaPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MusicDbEntity entity) {
        stmt.clearBindings();
 
        String lastMediaId = entity.getLastMediaId();
        if (lastMediaId != null) {
            stmt.bindString(1, lastMediaId);
        }
 
        String lastPlayName = entity.getLastPlayName();
        if (lastPlayName != null) {
            stmt.bindString(2, lastPlayName);
        }
        stmt.bindLong(3, entity.getLastPlayIndex());
        stmt.bindLong(4, entity.getLastPlayedPosition());
 
        String lastPlayAuthor = entity.getLastPlayAuthor();
        if (lastPlayAuthor != null) {
            stmt.bindString(5, lastPlayAuthor);
        }
 
        String lastMediaPath = entity.getLastMediaPath();
        if (lastMediaPath != null) {
            stmt.bindString(6, lastMediaPath);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MusicDbEntity readEntity(Cursor cursor, int offset) {
        MusicDbEntity entity = new MusicDbEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // lastMediaId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lastPlayName
            cursor.getInt(offset + 2), // lastPlayIndex
            cursor.getLong(offset + 3), // lastPlayedPosition
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lastPlayAuthor
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // lastMediaPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MusicDbEntity entity, int offset) {
        entity.setLastMediaId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLastPlayName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastPlayIndex(cursor.getInt(offset + 2));
        entity.setLastPlayedPosition(cursor.getLong(offset + 3));
        entity.setLastPlayAuthor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastMediaPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MusicDbEntity entity, long rowId) {
        return entity.getLastMediaId();
    }
    
    @Override
    public String getKey(MusicDbEntity entity) {
        if(entity != null) {
            return entity.getLastMediaId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MusicDbEntity entity) {
        return entity.getLastMediaId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
